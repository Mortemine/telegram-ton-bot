import os
import asyncio
import pymongo
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
MONGODB_URI = os.getenv("MONGODB_URI")


def connect_db():
    try:
        mongo_uri = MONGODB_URI

        if not mongo_uri:
            raise ValueError("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è MONGODB_URI")

        mongo_client = pymongo.MongoClient(mongo_uri)
        mongo_db = mongo_client["BacTokenData"]
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ BacTokenData")

        return mongo_db, mongo_client
    except Exception as error:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", error)
        exit(1)


bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

db, client = connect_db()
collection = db['bactokenbotusers']


class Buttons:
    # –ë–∞–∑–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    check_balance = 'üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å'
    top_up_balance = '‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'
    add_tokens_admin = 'üëë –ù–∞—á–∏—Å–ª–∏—Ç—å —Ç–æ–∫–µ–Ω—ã (–∞–¥–º–∏–Ω)'
    send_tokens = 'üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã'
    check_id = 'üÜî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–π ID'
    bac_services = 'üåê –°–µ—Ä–≤–∏—Å—ã BAC Community'

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    registration = 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'

    # –¢–∏–ø—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
    send_type_id = 'üÜî ID'
    send_type_username = '@ Username'
    send_type_phone = 'üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'

    # –í–∞–ª—é—Ç—ã
    ton = 'üíé TON'
    usdt = 'üí≤ USDT'
    bac = 'üåê BAC'

    # –ü—Ä–æ—á–µ–µ
    back = 'üîô –ù–∞–∑–∞–¥'
    cancel = '‚úñ –û—Ç–º–µ–Ω–∞'


recipient_types = {Buttons.send_type_id: "user_id", Buttons.send_type_phone: "phone_number",
                   Buttons.send_type_username: "username"}
currency_types = {Buttons.ton: "TON", Buttons.usdt: "USDT", Buttons.bac: "BAC"}


def get_data_with_struct(user_id, phone_number, username, balances, transactions):
    return {
        "user_id": user_id,
        "registration_date": datetime.now(),
        "phone_number": phone_number,
        "username": username,
        "isAdmin": False,
        "balances": balances,
        "transactions": transactions
    }


def is_admin(db_collection, user_id):
    adm_flag = db_collection.find_one({"user_id": user_id})["isAdmin"]
    return adm_flag


class AdminActions(StatesGroup):
    WAITING_FOR_ADD_TOKENS = State()


class UserActions(StatesGroup):
    WAITING_FOR_ADD_TOKENS = State()


def create_wallet(user_id):
    pass


def format_thousands(number):
    return f"{number:,}".replace(',', ' ')


def reg_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=Buttons.registration, request_contact=True)],
        ],
        resize_keyboard=True
    )
    return keyboard


class SendTokensStates(StatesGroup):
    CHOOSE_RECIPIENT_TYPE = State()  # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    ENTER_RECIPIENT = State()  # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    CHOOSE_CURRENCY = State()  # –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
    ENTER_AMOUNT = State()  # –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def recipient_type_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=Buttons.send_type_id), KeyboardButton(text=Buttons.send_type_phone)],
            [KeyboardButton(text=Buttons.send_type_username), KeyboardButton(text=Buttons.back)]
        ],
        resize_keyboard=True
    )


def currency_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=Buttons.ton), KeyboardButton(text=Buttons.usdt)],
            [KeyboardButton(text=Buttons.bac), KeyboardButton(text=Buttons.back)]
        ],
        resize_keyboard=True
    )


def base_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=Buttons.check_balance), KeyboardButton(text=Buttons.top_up_balance)],
            [KeyboardButton(text=Buttons.send_tokens), KeyboardButton(text=Buttons.check_id)],
            [KeyboardButton(text=Buttons.bac_services)]

        ],
        resize_keyboard=True
    )
    return keyboard


def admin_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=Buttons.check_balance), KeyboardButton(text=Buttons.top_up_balance)],
            [KeyboardButton(text=Buttons.send_tokens), KeyboardButton(text=Buttons.check_id)],
            [KeyboardButton(text=Buttons.bac_services)],
            [KeyboardButton(text=Buttons.add_tokens_admin)]

        ],
        resize_keyboard=True
    )
    return keyboard


def back_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=Buttons.cancel)],
        ],
        resize_keyboard=True
    )
    return keyboard


def get_user_keyboard(db_collection, user):
    if is_admin(db_collection, user):
        return admin_keyboard()
    return base_keyboard()


@router.message(lambda message: message.text == "/start")
async def start_command(message: Message):
    user = collection.find_one({"user_id": message.from_user.id})

    if user:
        await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_user_keyboard(collection, message.from_user.id))
    else:
        await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.", reply_markup=reg_keyboard())


# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
@router.message(F.text == Buttons.send_tokens)
async def start_send_tokens(message: Message, state: FSMContext):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:", reply_markup=recipient_type_keyboard())
    await state.set_state(SendTokensStates.CHOOSE_RECIPIENT_TYPE)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
@router.message(SendTokensStates.CHOOSE_RECIPIENT_TYPE)
async def choose_recipient_type(message: Message, state: FSMContext):
    if message.text == Buttons.back:
        await message.reply("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_user_keyboard(collection, message.from_user.id))
        await state.clear()
        return

    if message.text not in [Buttons.send_type_id, Buttons.send_type_phone, Buttons.send_type_username]:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    await state.update_data(recipient_type=message.text)
    if message.text == Buttons.send_type_id:
        await message.reply(f"–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º (–º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é)",
                            reply_markup=back_keyboard())
    elif message.text == Buttons.send_type_phone:
        await message.reply(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 7–•–•–•–•–•–•–•–•–•–•", reply_markup=back_keyboard())
    elif message.text == Buttons.send_type_username:
        await message.reply(f"–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º", reply_markup=back_keyboard())
    await state.set_state(SendTokensStates.ENTER_RECIPIENT)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è
@router.message(SendTokensStates.ENTER_RECIPIENT)
async def enter_recipient(message: Message, state: FSMContext):
    if message.text == Buttons.back or message.text == Buttons.cancel:
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:", reply_markup=recipient_type_keyboard())
        await state.set_state(SendTokensStates.CHOOSE_RECIPIENT_TYPE)
        return

    data = await state.get_data()
    recipient_type = data.get("recipient_type")
    user = None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    if recipient_type == Buttons.send_type_id:
        user = collection.find_one({"user_id": message.text})
    elif recipient_type == Buttons.send_type_phone:
        user = collection.find_one({"phone_number": message.text})
    elif recipient_type == Buttons.send_type_username:
        username = message.text.lower().replace('@', '')
        user = collection.find_one({"username": username})
    if not user:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(recipient=message.text.lower().replace('@', ''))
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=currency_keyboard())
    await state.set_state(SendTokensStates.CHOOSE_CURRENCY)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
@router.message(SendTokensStates.CHOOSE_CURRENCY)
async def choose_currency(message: Message, state: FSMContext):
    if message.text == Buttons.back:
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:", reply_markup=recipient_type_keyboard())
        await state.set_state(SendTokensStates.CHOOSE_RECIPIENT_TYPE)
        return

    if message.text not in [Buttons.ton, Buttons.usdt, Buttons.bac]:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç.")
        return

    await state.update_data(currency=message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=back_keyboard())
    await state.set_state(SendTokensStates.ENTER_AMOUNT)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@router.message(SendTokensStates.ENTER_AMOUNT)
async def enter_amount(message: Message, state: FSMContext):
    if message.text == Buttons.back or message.text == Buttons.cancel:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –≤–∞–ª—é—Ç—ã
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=currency_keyboard())
        await state.set_state(SendTokensStates.CHOOSE_CURRENCY)
        return

    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    data = await state.get_data()
    recipient = data.get("recipient")
    currency = currency_types[data.get("currency")]
    user_id = message.from_user.id
    recipient_type = recipient_types[data.get("recipient_type")]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    sender_balance = collection.find_one({"user_id": user_id})["balances"][currency]

    if sender_balance < amount:
        await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
    recipient_id = collection.find_one({recipient_type: recipient})["user_id"]

    current_balance = collection.find_one({recipient_type: recipient})["balances"][currency]
    sender_current_balance = collection.find_one({"user_id": user_id})["balances"][currency]
    collection.update_one({"user_id": user_id}, {"$inc": {f"balances.{currency.upper()}": -amount},
                                                 "$push": {
                                                     "transactions": {"Type": "Send", "From": user_id, "To": recipient,
                                                                      "Token": currency, "Amount": amount,
                                                                      "New_balance": sender_current_balance - amount,
                                                                      "Date": datetime.now()}}})
    collection.update_one({recipient_type: recipient}, {"$inc": {f"balances.{currency.upper()}": amount},
                                                        "$push": {"transactions": {"Type": "Send", "From": user_id,
                                                                                   "To": recipient, "Token": currency,
                                                                                   "Amount": amount,
                                                                                   "New_balance": current_balance + amount,
                                                                                   "Date": datetime.now()}}})
    await message.reply(f"–ü–µ—Ä–µ–≤–æ–¥ {amount} {currency} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
    await message.reply("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_user_keyboard(collection, message.from_user.id))
    username = collection.find_one({"user_id": user_id})['username']
    await bot.send_message(recipient_id, f"–í–∞–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {currency}: {amount} –æ—Ç {'@'+username if username else user_id}")

    await state.clear()


@router.message(lambda message: message.text == Buttons.check_id)
async def show_id(message: Message):
    await message.reply(f"–í–∞—à ID: {message.from_user.id}")


@dp.message(F.contact)
async def start_command(message: Message):
    user = collection.find_one({"user_id": message.from_user.id})
    if not user:
        user_id = message.from_user.id
        phone_number = message.contact.phone_number
        username = message.from_user.username.lower() if message.from_user.username else ""
        balances = {"TON": 0.0, "USDT": 0.0, "BAC": 0.0}
        transactions = []
        data = get_data_with_struct(user_id, phone_number, username, balances, transactions)
        collection.insert_one(data)
        await message.reply("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞.", reply_markup=base_keyboard())
    else:
        await message.reply("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=get_user_keyboard(collection, message.from_user.id))


@router.message(lambda message: message.text == Buttons.check_balance)
async def check_balance(message: Message):
    user_id = message.from_user.id
    balance = collection.find_one({"user_id": user_id})["balances"]
    if balance:
        await message.reply(f"–í–∞—à –±–∞–ª–∞–Ω—Å:\n{Buttons.ton}: {format_thousands(balance['TON'])}\n{Buttons.usdt}:"
                            f" {format_thousands(balance['USDT'])}\n{Buttons.bac}: {format_thousands(balance['BAC'])}")
    else:
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")


@router.message(lambda message: message.text == Buttons.top_up_balance)
async def deposit(message: Message):
    await message.reply("–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à TON-–∫–æ—à–µ–ª–µ–∫.")


@router.message(lambda message: message.text == Buttons.add_tokens_admin)
async def add_tokens(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if not is_admin(collection, user_id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    await message.reply("–î–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <user_id> <token> <amount>",
                        reply_markup=back_keyboard())
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    await state.set_state(AdminActions.WAITING_FOR_ADD_TOKENS)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
@router.message(AdminActions.WAITING_FOR_ADD_TOKENS)
async def process_admin_add_tokens(message: Message, state: FSMContext):
    if message.text == Buttons.cancel:
        await message.reply("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_user_keyboard(collection, message.from_user.id))
        await state.clear()
        return
    text = message.text.split()
    if len(text) != 3:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <user_id> <token> <amount>")
        return
    try:
        target_id = int(text[0])
        token = text[1].upper()
        amount = float(text[2])
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return
    if token not in [Buttons.ton, Buttons.usdt, Buttons.bac]:
        await message.reply("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω—ã: TON, USDT, BAC.")
        return

    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
    recipient = collection.find_one({"user_id": target_id})
    if recipient:
        current_balance = recipient["balances"][token]
        collection.update_one({"user_id": target_id}, {"$inc": {f"balances.{token}": amount},
                                                       "$push": {
                                                           "transactions": {"Type": "ADM", "From": message.from_user.id,
                                                                            "To": target_id, "Token": token,
                                                                            "Amount": amount,
                                                                            "New_balance": current_balance + amount,
                                                                            "Date": datetime.now()}}})
        await message.reply(f"–ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} {token} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}.")
        await bot.send_message(target_id, f"–í–∞–º –±—ã–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã {token}: {amount}")
    else:
        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


# –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ç–µ–π–∫–∏–Ω–≥—É
scheduler = AsyncIOScheduler()


def daily_staking():
    pass


scheduler.add_job(daily_staking, 'interval', days=1)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    scheduler.start()
    try:
        await dp.start_polling(bot, skip_updates=True)
    finally:
        scheduler.shutdown()


if __name__ == '__main__':
    asyncio.run(main())
